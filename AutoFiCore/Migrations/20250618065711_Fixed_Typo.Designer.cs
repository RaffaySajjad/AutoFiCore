// <auto-generated />
using System;
using System.Collections.Generic;
using AutoFiCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoFiCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618065711_Fixed_Typo")]
    partial class Fixed_Typo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoFiCore.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("EmailMeNewResults")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PreferredContactMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("AutoFiCore.Models.Drivetrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Drivetrains");
                });

            modelBuilder.Entity("AutoFiCore.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CamType")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<int>("TorqueFtLBS")
                        .HasColumnType("integer");

                    b.Property<int?>("TorqueRPM")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("Valves")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("AutoFiCore.Models.FuelEconomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CO2Emissions")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CityMPG")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CombinedMPG")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FuelTankSize")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HighwayMPG")
                        .HasColumnType("numeric");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("FuelEconomies");
                });

            modelBuilder.Entity("AutoFiCore.Models.Measurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CargoCapacityCuFt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurbWeightLBS")
                        .HasColumnType("numeric");

                    b.Property<int>("Doors")
                        .HasColumnType("integer");

                    b.Property<decimal>("GroundClearance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HeightInches")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LengthInches")
                        .HasColumnType("numeric");

                    b.Property<int>("MaximumSeating")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<decimal>("WheelbaseInches")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WidthInches")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("AutoFiCore.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BorrowAmount")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("NotSure")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("AutoFiCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AutoFiCore.Models.UserInteractions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("UserInteractions");
                });

            modelBuilder.Entity("AutoFiCore.Models.UserLikes", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.Property<string>("vehicleVin")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.HasKey("userId", "vehicleVin");

                    b.ToTable("UserLikes");
                });

            modelBuilder.Entity("AutoFiCore.Models.UserSavedSearch", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.Property<string>("search")
                        .HasColumnType("text");

                    b.HasKey("userId", "search");

                    b.ToTable("UserSavedSearches");
                });

            modelBuilder.Entity("AutoFiCore.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Transmission")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .HasDatabaseName("IX_Vehicles_Color");

                    b.HasIndex("Make")
                        .HasDatabaseName("IX_Vehicles_Make");

                    b.HasIndex("Mileage")
                        .HasDatabaseName("IX_Vehicles_Mileage");

                    b.HasIndex("Model")
                        .HasDatabaseName("IX_Vehicles_Model");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_Vehicles_Price");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Vehicles_Status");

                    b.HasIndex("Transmission")
                        .HasDatabaseName("IX_Vehicles_Transmission");

                    b.HasIndex("Year")
                        .HasDatabaseName("IX_Vehicles_Year");

                    b.HasIndex("Make", "Id")
                        .HasDatabaseName("IX_Vehicles_Make_Id");

                    b.HasIndex("Model", "Id")
                        .HasDatabaseName("IX_Vehicles_Model_Id");

                    b.HasIndex("Price", "Id")
                        .HasDatabaseName("IX_Vehicles_Price_Id");

                    b.HasIndex("Year", "Id")
                        .HasDatabaseName("IX_Vehicles_Year_Id");

                    b.HasIndex("Make", "Model", "Price", "Year", "Id")
                        .HasDatabaseName("IX_Vehicles_Make_Model_Price_Year_Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehicleOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VehicleOptions");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehiclePerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ZeroTo60MPH")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehiclePerformances");
                });

            modelBuilder.Entity("VehicleVehicleOptions", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleOptionsId")
                        .HasColumnType("integer");

                    b.HasKey("VehicleId", "VehicleOptionsId");

                    b.HasIndex("VehicleOptionsId");

                    b.ToTable("Vehicle_VehicleOptions_Mapping", (string)null);
                });

            modelBuilder.Entity("AutoFiCore.Models.Drivetrain", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Drivetrain")
                        .HasForeignKey("AutoFiCore.Models.Drivetrain", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.Engine", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Engine")
                        .HasForeignKey("AutoFiCore.Models.Engine", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.FuelEconomy", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("FuelEconomy")
                        .HasForeignKey("AutoFiCore.Models.FuelEconomy", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.Measurements", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Measurements")
                        .HasForeignKey("AutoFiCore.Models.Measurements", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.UserInteractions", b =>
                {
                    b.HasOne("AutoFiCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehiclePerformance", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("VehiclePerformance")
                        .HasForeignKey("AutoFiCore.Models.VehiclePerformance", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleVehicleOptions", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoFiCore.Models.VehicleOptions", null)
                        .WithMany()
                        .HasForeignKey("VehicleOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoFiCore.Models.Vehicle", b =>
                {
                    b.Navigation("Drivetrain");

                    b.Navigation("Engine");

                    b.Navigation("FuelEconomy");

                    b.Navigation("Measurements");

                    b.Navigation("VehiclePerformance");
                });
#pragma warning restore 612, 618
        }
    }
}

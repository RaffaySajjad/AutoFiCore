// <auto-generated />
using System.Collections.Generic;
using AutoFiCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoFiCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520063503_UpdatedSchemaForCarFeaturesJSON")]
    partial class UpdatedSchemaForCarFeaturesJSON
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoFiCore.Models.Drivetrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Drivetrains");
                });

            modelBuilder.Entity("AutoFiCore.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CamType")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<int?>("TorqueRPM")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("Valves")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("torque_ft_lbs")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("AutoFiCore.Models.FuelEconomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BetterCapacityKWH")
                        .HasColumnType("integer");

                    b.Property<int>("CO2Emissions")
                        .HasColumnType("integer");

                    b.Property<int>("CityMPG")
                        .HasColumnType("integer");

                    b.Property<int>("CombinedMPG")
                        .HasColumnType("integer");

                    b.Property<int?>("FuelTankSize")
                        .HasColumnType("integer");

                    b.Property<int>("HighwayMPG")
                        .HasColumnType("integer");

                    b.Property<int>("RangeMiles")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("FuelEconomies");
                });

            modelBuilder.Entity("AutoFiCore.Models.Measurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CargoCapacityCuFt")
                        .HasColumnType("integer");

                    b.Property<int>("CargoWeightLBS")
                        .HasColumnType("integer");

                    b.Property<int>("Doors")
                        .HasColumnType("integer");

                    b.Property<int>("GroundClearance")
                        .HasColumnType("integer");

                    b.Property<int>("HeightInches")
                        .HasColumnType("integer");

                    b.Property<int>("LengthInches")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumSeating")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("WheelbaseInches")
                        .HasColumnType("integer");

                    b.Property<int>("WidthInches")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("AutoFiCore.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Transmission")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehicleOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VehicleOptions");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehiclePerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("ZeroTo60MPH")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehiclePerformances");
                });

            modelBuilder.Entity("VehicleVehicleOptions", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleOptionsId")
                        .HasColumnType("integer");

                    b.HasKey("VehicleId", "VehicleOptionsId");

                    b.HasIndex("VehicleOptionsId");

                    b.ToTable("Vehicle_VehicleOptions_Mapping", (string)null);
                });

            modelBuilder.Entity("AutoFiCore.Models.Drivetrain", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Drivetrain")
                        .HasForeignKey("AutoFiCore.Models.Drivetrain", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.Engine", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Engine")
                        .HasForeignKey("AutoFiCore.Models.Engine", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.FuelEconomy", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("FuelEconomy")
                        .HasForeignKey("AutoFiCore.Models.FuelEconomy", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.Measurements", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("Measurements")
                        .HasForeignKey("AutoFiCore.Models.Measurements", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoFiCore.Models.VehiclePerformance", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", "Vehicle")
                        .WithOne("VehiclePerformance")
                        .HasForeignKey("AutoFiCore.Models.VehiclePerformance", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleVehicleOptions", b =>
                {
                    b.HasOne("AutoFiCore.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoFiCore.Models.VehicleOptions", null)
                        .WithMany()
                        .HasForeignKey("VehicleOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoFiCore.Models.Vehicle", b =>
                {
                    b.Navigation("Drivetrain");

                    b.Navigation("Engine");

                    b.Navigation("FuelEconomy");

                    b.Navigation("Measurements");

                    b.Navigation("VehiclePerformance");
                });
#pragma warning restore 612, 618
        }
    }
}
